task jacocoTestReport(type: JacocoReport, dependsOn: ["testDebugUnitTest", "createDebugCoverageReport"]) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"
    reports {
        xml.enabled = true
        html.enabled = true
    }
    def fileFilter = ['**/R.class', '**/R$*.class',
                      '**/BuildConfig.*', '**/Manifest*.*',
                      'android/**/*.*', '**/Lambda$*.class', //Retrolambda
                      '**/Lambda.class', '**/*Lambda.class',
                      '**/*Lambda*.class', '**/*Lambda*.*',
                      '**/*Builder.*', '**/*_MembersInjector.class', //Dagger2 generated code
                      '**/*_MembersInjector*.*', //Dagger2 generated code
                      '**/*_*Factory*.*', //Dagger2 generated code
                      '**/*Component*.*', //Dagger2 generated code
                      '**/*Module*.*', //Dagger2 generated code
    ]
    def debugTree = fileTree(dir: "$buildDir/intermediates/classes/debug/com/rocketinsights/android", excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir: "$buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"
    getSourceDirectories().setFrom(files([mainSrc]))
    getClassDirectories().setFrom(files([debugTree], [kotlinDebugTree]))
    getExecutionData().setFrom(fileTree(dir: project.projectDir, includes: ['**/*.exec', '**/*.ec']))
}