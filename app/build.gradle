plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'jacoco'
    id 'androidx.navigation.safeargs'
    id 'com.github.ben-manes.versions'
    id 'com.google.gms.google-services'
}

apply from: 'jacoco.gradle'
// If code style check fails do not try to make a build
apply from: 'lint.gradle'

repositories {
    mavenCentral()
    maven { url 'https://maven.google.com' }
    maven { url "https://jitpack.io" }
}

// Google API Keys
/*
    We should have separated keys for Prod and Dev in order to avoid impacting the analytics
    and any usage fee.
    You also have to restrict them by platform to avoid external use without permission.
*/
def GOOGLE_API_PROD = "\"AIzaSyAZ_wlj_s0pihjs16s8MufDiq5_tf9yEcY\""
def GOOGLE_API_DEV = "\"AIzaSyAZ_wlj_s0pihjs16s8MufDiq5_tf9yEcY\""

// API REST URLs
def API_URL_DEV = "\"https://run.mocky.io/v3/\""
def API_URL_PROD = "\"https://run.mocky.io/v3/\""

android {
    compileSdkVersion 30
    defaultConfig {
        applicationId "com.rocketinsights.android"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            testCoverageEnabled true

            minifyEnabled false
            shrinkResources false
        }
        release {
            // Use default Signing Config - CI System set the production signing configs.
            signingConfig signingConfigs.debug

            minifyEnabled true
            shrinkResources true

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFiles fileTree('proguard-libs').asList().toArray()
        }
    }
    flavorDimensions "default"
    productFlavors {
        dev {
            dimension "default"

            manifestPlaceholders = [appName: "@string/app_name_dev"]
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
            resValue 'string', 'workManager', "com.rocketinsights.android.dev.workmanager-init"
            resValue 'string', 'fileProvider', "com.rocketinsights.android.fileprovider.dev"

            // Google Maps
            resValue "string", "maps_api_key", GOOGLE_API_PROD

            // API Url for dev
            buildConfigField "String", "BASE_URL", API_URL_DEV
        }

        prod {
            dimension "default"

            manifestPlaceholders = [appName: "@string/app_name"]
            resValue 'string', 'workManager', "com.rocketinsights.android.workmanager-init"
            resValue 'string', 'fileProvider', "com.rocketinsights.android.fileprovider.prod"

            // Google Maps
            resValue "string", "maps_api_key", GOOGLE_API_DEV

            // API Url for prod
            buildConfigField "String", "BASE_URL", API_URL_PROD
        }
    }
    // Enables view binding.
    buildFeatures {
        viewBinding true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                excludes = ['jdk.internal.*']
            }
        }
    }
}

ext {
    legacy_version = "1.0.0"
    constraint_layout_version = "2.0.4"
    ktlint_version = "0.33.0"
    koin_version = "3.0.1-beta-1"
    appCompat_version = "1.2.0"
    material_design_version = "1.3.0"
    coroutines_version = "1.4.3"
    timber_version = "4.7.1"
    moshi_version = "1.11.0"
    retrofit_version = "2.9.0"
    leak_canary_version = "2.6"
    lifecycle_extensions = "2.2.0"
    lifecycle_version = "2.3.0"
    room_version = "2.2.6"
    coil_version = "1.1.1"
    junit_version = "1.1.2"
    test_rule_version = "1.0.2"
    mockito_version = "2.2.0"
    espresso_version = "3.1.1"
    core_testing_version = "2.1.0"
    mockito_inline_version = "2.28.2"
    firebase_version = "26.6.0"
    firebase_ui_version = "7.1.1"
    kotlinx_coroutines_play_services_version = "1.4.3"
    datastore_version = "1.0.0-alpha08"
    ktx_activity_version = "1.3.0-alpha04"
    ktx_fragment_version = "1.3.0"
    play_services_maps_version = "17.0.0"
    play_services_location_version = "18.0.0"
    google_maps_utils_version = "2.2.0"
    quickpermissions_version = "0.4.1"
    work_version = "2.5.0"
    logging_interceptor_version = "4.9.0"
    chuck_version = "3.4.0"
}

jacoco {
    toolVersion = "0.8.5"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.legacy:legacy-support-v4:$legacy_version"
    implementation "androidx.appcompat:appcompat:$appCompat_version"
    implementation "com.google.android.material:material:$material_design_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"
    implementation "androidx.activity:activity-ktx:$ktx_activity_version"
    implementation "androidx.fragment:fragment-ktx:$ktx_fragment_version"

    // Code style
    ktlint "com.pinterest:ktlint:$ktlint_version"

    //Logs
    implementation "com.jakewharton.timber:timber:$timber_version"

    // Retrofit
    implementation "com.squareup.moshi:moshi-kotlin:$moshi_version"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshi_version"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"

    // Http Logging Interceptor
    implementation "com.squareup.okhttp3:logging-interceptor:$logging_interceptor_version"

    // Friendly Http Inspector through separate App
    debugImplementation "com.github.chuckerteam.chucker:library:$chuck_version"
    releaseImplementation "com.github.chuckerteam.chucker:library-no-op:$chuck_version"
    // Use no-op versions for testing
    testImplementation "com.readystatesoftware.chuck:library-no-op:$chuck_version"

    // Kotlin Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    // Android Lifecycle
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_extensions"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // Room
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"

    // Coil
    implementation "io.coil-kt:coil:$coil_version"

    // Koin
    implementation "io.insert-koin:koin-android:$koin_version"
    implementation "io.insert-koin:koin-android-ext:$koin_version"
    implementation "io.insert-koin:koin-androidx-workmanager:$koin_version"
    testImplementation "io.insert-koin:koin-test:$koin_version"

    // Firebase
    implementation platform("com.google.firebase:firebase-bom:$firebase_version")
    implementation "com.firebaseui:firebase-ui-auth:$firebase_ui_version"
    // Source: https://github.com/Kotlin/kotlinx.coroutines/tree/master/integration/kotlinx-coroutines-play-services
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:$kotlinx_coroutines_play_services_version"

    // DataStore
    implementation "androidx.datastore:datastore-preferences:$datastore_version"

    // Work
    implementation "androidx.work:work-runtime-ktx:$work_version"

    // Leak detection
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leak_canary_version"

    // Permissions
    implementation "com.github.quickpermissions:quickpermissions-kotlin:$quickpermissions_version"

    // Maps & Location
    implementation "com.google.android.gms:play-services-maps:$play_services_maps_version"
    implementation "com.google.android.gms:play-services-location:$play_services_location_version"

    // Utilities for Maps SDK for Android (requires Google Play Services)
    implementation "com.google.maps.android:android-maps-utils:$google_maps_utils_version"

    // Test
    // Unit testing framework
    androidTestImplementation "com.android.support.test:rules:$test_rule_version"
    testImplementation "androidx.test.ext:junit:$junit_version"
    androidTestImplementation "androidx.test.ext:junit:$junit_version"

    // Mockito
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockito_version"
    testImplementation "org.mockito:mockito-inline:$mockito_inline_version"

    // Test Coroutines
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"

    // Espresso
    androidTestImplementation("androidx.test.espresso:espresso-core:$espresso_version", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    //there's a conflict in the test libraries here, so we have to explicitly set these
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    testImplementation("androidx.arch.core:core-testing:$core_testing_version", {
        exclude group: 'com.android.support', module: 'support-compat'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-core-utils'
    })
}
