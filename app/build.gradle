apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jacoco'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.github.ben-manes.versions'
apply from: 'jacoco.gradle'

// If code style check fails do not try to make a build
apply from: 'lint.gradle'
check.dependsOn ktlint

repositories {
    mavenCentral()
    maven { url 'https://maven.google.com' }
    maven { url "https://jitpack.io" }
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.rocketinsights.android"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFiles fileTree('proguard-libs').asList().toArray()
        }
    }
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

ext {
    legacy_version = "1.0.0"
    constraint_layout_version = "2.0.0-alpha2"
    ktlint_version = "0.29.0"
    koin_version = "2.0.1"
    appCompat_version = "1.1.0-alpha04"
    material_design_version = "1.1.0-alpha07"
    coroutines_version = "1.2.1"
    timber_version = "4.7.1"
    moshi_version = "1.8.0"
    retrofit_version = "2.5.0"
    coroutine_adapter_version = "0.9.2"
    leack_canary_version = "1.6.3"
    lifecycle_version = "2.1.0-alpha04"
    room_version = "2.1.0-alpha07"
    glide_version = "4.9.0"
    navigation_version = "1.0.0"
    junit_version = "1.1.0"
    test_rule_version = "1.0.2"
    mockito_version = "2.1.0"
    espresso_version = "3.1.1"
    core_testing_version = "2.0.0"
}

jacoco {
    toolVersion = "0.7.5.201505241946"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.legacy:legacy-support-v4:$legacy_version"
    implementation "androidx.appcompat:appcompat:$appCompat_version"
    implementation "com.google.android.material:material:$material_design_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"

    // Code style
    ktlint "com.github.shyiko:ktlint:$ktlint_version"

    //Logs
    implementation "com.jakewharton.timber:timber:$timber_version"

    // Retrofit
    implementation "com.squareup.moshi:moshi-kotlin:$moshi_version"
    kapt("com.squareup.moshi:moshi-kotlin-codegen:$moshi_version")
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$coroutine_adapter_version"

    // Kotlin Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    // Android Lifecycle
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"

    // Room
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // Navigation
    implementation "android.arch.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "android.arch.navigation:navigation-ui-ktx:$navigation_version"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    annotationProcessor "com.github.bumptech.glide:compiler:$glide_version"

    // Koin
    implementation "org.koin:koin-android:$koin_version"
    implementation "org.koin:koin-androidx-scope:$koin_version"
    implementation "org.koin:koin-androidx-viewmodel:$koin_version"
    testImplementation "org.koin:koin-test:$koin_version"

    //Leak detection
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leack_canary_version"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leack_canary_version"
    debugImplementation "com.squareup.leakcanary:leakcanary-support-fragment:$leack_canary_version"

    // Test
    // Unit testing framework
    androidTestImplementation "com.android.support.test:rules:$test_rule_version"
    testImplementation "androidx.test.ext:junit:$junit_version"
    androidTestImplementation "androidx.test.ext:junit:$junit_version"

    // Mockito
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockito_version"

    // Test Coroutines
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"

    // Espresso
    androidTestImplementation("androidx.test.espresso:espresso-core:$espresso_version", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    //there's a conflict in the test libraries here, so we have to explicitly set these
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    testImplementation("androidx.arch.core:core-testing:$core_testing_version", {
        exclude group: 'com.android.support', module: 'support-compat'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-core-utils'
    })
}
